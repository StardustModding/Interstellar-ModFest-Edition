on: [push]
name: build

jobs:
  send-discord:
    name: Send Discord
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Get branch name
        id: get_branch
        run: echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT

      - name: Get latest commit hash
        id: get_hash
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Read properties
        uses: christian-draeger/read-properties@908f99d3334be3802ec7cb528395a69d19914e7b
        id: read_properties
        with:
          path: gradle.properties
          properties: minecraft_version mod_version archives_base_name

      - name: Send building message to discord
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        if: github.event_name == 'push' && env.DISCORD_WEBHOOK != ''
        uses: fateyan/action-discord-notifier@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          message-title: Building binaries from branch ${{ steps.get_branch.outputs.branch }}

  build:
    name: Build
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            dir: linux-x86-64
            filename: libinterstellar_natives.so
            windows: false
            on: ubuntu-latest
            os: linux
          - target: aarch64-unknown-linux-gnu
            dir: linux-aarch64
            filename: libinterstellar_natives.so
            windows: false
            on: ubuntu-latest
            os: linux
          - target: arm-unknown-linux-gnueabihf
            dir: linux-arm
            filename: libinterstellar_natives.so
            windows: false
            on: ubuntu-latest
            os: linux
          - target: x86_64-apple-darwin
            windows: false
            dir: darwin-x86-64
            filename: libinterstellar_natives.dylib
            on: macos-latest # apple makes it hard to build for macos from linux :(
            os: macos
          - target: aarch64-apple-darwin
            windows: false
            dir: darwin-aarch64
            filename: libinterstellar_natives.dylib
            on: macos-latest
            os: macos
          - target: x86_64-pc-windows-gnu
            windows: true
            dir: win32-x86-64
            filename: interstellar_natives.dll
            on: ubuntu-latest
            os: linux
          - target: aarch64-pc-windows-gnullvm
            windows: true
            dir: win32-aarch64
            filename: interstellar_natives.dll
            on: ubuntu-latest
            os: linux
    runs-on: ${{ matrix.on }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3

      - name: Install dependencies
        run: |
          mkdir -p ~/.zig

          if [[ "$(uname -m)" == "arm64" ]]; then
            curl -fsSL \
              "https://ziglang.org/download/0.13.0/zig-${{ matrix.os }}-aarch64-0.13.0.tar.xz" | \
              tar -xJ -C ~/.zig --strip-components 1
          else
            curl -fsSL \
              "https://ziglang.org/download/0.13.0/zig-${{ matrix.os }}-$(uname -m)-0.13.0.tar.xz" | \
              tar -xJ -C ~/.zig --strip-components 1
          fi

          chmod a+rx ~/.zig/zig
          sudo ln -sf ~/.zig/zig /usr/local/bin/zig

      - name: Cache
        uses: actions/cache@v4
        env:
          cache-name: rust-cache
        with:
          path: |
            ~/.cargo
            ~/.rustup
            target
            native/rust/target
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.target }}-
            ${{ runner.os }}-build-${{ matrix.target }}-
            ${{ runner.os }}-${{ matrix.target }}-

      - name: Install Rust toolchain
        run: |
          rustup update --no-self-update nightly
          rustup component add --toolchain nightly rustfmt rust-src
          rustup default nightly

          rustup target add ${{ matrix.target }}

      - name: Install cargo-binstall
        uses: cargo-bins/cargo-binstall@main

      - name: Install cargo-zigbuild
        run: |
          cargo binstall cargo-zigbuild -y

      - name: Install cross
        run: |
          cargo binstall cross -y

      - name: Build
        if: matrix.windows != true
        run: |
          ./gradlew :native:compileRust_${{ matrix.target }}
          
          mkdir bin
          mkdir bin/${{ matrix.dir }}

          cp -v native/src/generated/resources/${{ matrix.dir }}/${{ matrix.filename }} bin/${{ matrix.dir }}/${{ matrix.filename }}

      - name: Build (windows)
        if: matrix.windows == true
        run: |
          ./gradlew -Dgrusty.cross=true :native:compileRust_${{ matrix.target }}

          mkdir bin
          mkdir bin/${{ matrix.dir }}
          
          cp -v native/src/generated/resources/${{ matrix.dir }}/${{ matrix.filename }} bin/${{ matrix.dir }}/${{ matrix.filename }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.target }}
          path: bin/*

  merge:
    name: Build Mod
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Merge
        run: |
          mkdir -p bin
          mkdir -p native/src/generated/resources

          for dir in artifacts/*; do
            cp -rv $dir/* bin/
            cp -rv $dir/* native/src/generated/resources
          done

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3

      - name: Get branch name
        id: get_branch
        run: echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT

      - name: Get latest commit hash
        id: get_hash
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Read properties
        uses: christian-draeger/read-properties@908f99d3334be3802ec7cb528395a69d19914e7b
        id: read_properties
        with:
          path: gradle.properties
          properties: minecraft_version mod_version archives_base_name

      - name: Send building message to discord
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        if: github.event_name == 'push' && env.DISCORD_WEBHOOK != ''
        uses: fateyan/action-discord-notifier@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          message-title: Building mod from branch ${{ steps.get_branch.outputs.branch }}

      - name: Rust Cache
        uses: actions/cache@v4
        env:
          cache-name: rust-cache
        with:
          path: |
            ~/.cargo
            ~/.rustup
            target
            native/rust/target
          key: ${{ runner.os }}-build-${{ env.cache-name }}-final-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-final-
            ${{ runner.os }}-build-final-
            ${{ runner.os }}-final-

      - name: Install Rust toolchain
        run: |
          rustup update --no-self-update nightly
          rustup component add --toolchain nightly rustfmt rust-src
          rustup default nightly

      - run:
          ./gradlew build

#      - env:
#          MAVEN_USER: ${{ secrets.MAVEN_USER }}
#          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
#        run:
#          ./gradlew publish

      - name: Find jars
        id: find_jars
        run: |
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "jars<<$EOF" >> $GITHUB_OUTPUT
          find . -regextype posix-extended -regex "\.\/(fabric|forge)\/build\/libs\/${{ steps.read_properties.outputs.archives_base_name }}-(fabric|forge)-${{ steps.read_properties.outputs.mod_version }}\+mc${{ steps.read_properties.outputs.minecraft_version }}-build\.${{ github.run_number }}(|-dev|-dev-shadow|-sources|-dokka)\.jar" >> $GITHUB_OUTPUT
          echo "$EOF" >> $GITHUB_OUTPUT

      - name: Send built files to discord
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        if: github.event_name == 'push' && env.DISCORD_WEBHOOK != ''
        run: |
          while IFS= read -r f
            do curl -F "file=@\"$f\";filename=\"$(echo ${f##*/} | sed 's/+/-/g')\"" $DISCORD_WEBHOOK
          done <<< "${{ steps.find_jars.outputs.jars }}"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: bin/*
